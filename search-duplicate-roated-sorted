#include<bits/stdc++.h>
using namespace std;

// time complexity of this code is O(logN)
// this is from geeksforgeeks

int duplicateRoatedSorted(vector<int>&arr, int low, int high,int k)
{
   

   while(low<=high)
   {
        int mid=(low+high)/2;

        if(arr[mid] == k)
        {
            return mid;
        }

        if(arr[low] == arr[mid] && arr[mid] == arr[high])
        {
            low++;
            high--;
        }
        // here i will check if the low to mid is sorted or not
        if(arr[low]<=arr[mid])
        {
            if(arr[low]<=k && arr[high]>=k)
            {
                high=mid-1;
            }
            else{
                low=mid+1;
            }

        }
        else{
            if(arr[mid]<=k && arr[high]>=k)
            {
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
   }

   return -1;


}

int main()
{
    std::iostream::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    

    int n;
    cin>>n;


    int key;
    cin>>key;

    vector<int>arr(n);

    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }

    cout<<duplicateRoatedSorted(arr,0,n-1,key);

    return 0;

}


