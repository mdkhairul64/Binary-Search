/// the most part of solving the binaary search is to determine the low and high value otherwise 
/// i can not solve the problem eaasily



#include<bits/stdc++.h>

using namespace std;


#define ll long long int 

/// the time complexity is O(logx)

// i do this code for handling the large part of the value like if low=1 and high=10^9 so the 
// the nth root of the number will be overflow the range 


ll power(int mid,int n,int x)
{
    ll ans=1;
    for(int i=1;i<=n;i++)
    {
        ans=ans*mid;

        if(ans>x)
        {
            return 2;
        }
    }

    if(ans==x)
    {
        return 1;
    }
    return 0;
}

int  findNthroot(int x,int n)
{
    int low=1,high=x;

    while(low<=high)
    {
        int mid=(low+high)/2;

        if(power(mid,n,x)==1)
        {
            return mid;
        }
        else if(pow(mid,n)== 0)
        {
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }

    return -1;
}


int main()
{
    std::iostream::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);


    int n,x;
    cin>>n>>x;
    

    int res=findNthroot(x,n);
    if(res!=-1)
    {
        cout<<res<<"\n";
    }
    else{
        cout<<"root not found"<<"\n";
    }

    return 0;
}
